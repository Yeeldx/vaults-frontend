/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RegistryInterface extends utils.Interface {
  functions: {
    "setGovernance(address)": FunctionFragment;
    "acceptGovernance()": FunctionFragment;
    "latestRelease()": FunctionFragment;
    "latestVault(address)": FunctionFragment;
    "newRelease(address)": FunctionFragment;
    "newVault(address,address,address,string,string)": FunctionFragment;
    "newVault(address,address,address,string,string,uint256)": FunctionFragment;
    "newExperimentalVault(address,address,address,address,string,string)": FunctionFragment;
    "newExperimentalVault(address,address,address,address,string,string,uint256)": FunctionFragment;
    "endorseVault(address)": FunctionFragment;
    "endorseVault(address,uint256)": FunctionFragment;
    "setBanksy(address)": FunctionFragment;
    "setBanksy(address,bool)": FunctionFragment;
    "tagVault(address,string)": FunctionFragment;
    "numReleases()": FunctionFragment;
    "releases(uint256)": FunctionFragment;
    "numVaults(address)": FunctionFragment;
    "vaults(address,uint256)": FunctionFragment;
    "tokens(uint256)": FunctionFragment;
    "numTokens()": FunctionFragment;
    "isRegistered(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "pendingGovernance()": FunctionFragment;
    "tags(address)": FunctionFragment;
    "banksy(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "setGovernance"
      | "acceptGovernance"
      | "latestRelease"
      | "latestVault"
      | "newRelease"
      | "newVault(address,address,address,string,string)"
      | "newVault(address,address,address,string,string,uint256)"
      | "newExperimentalVault(address,address,address,address,string,string)"
      | "newExperimentalVault(address,address,address,address,string,string,uint256)"
      | "endorseVault(address)"
      | "endorseVault(address,uint256)"
      | "setBanksy(address)"
      | "setBanksy(address,bool)"
      | "tagVault"
      | "numReleases"
      | "releases"
      | "numVaults"
      | "vaults"
      | "tokens"
      | "numTokens"
      | "isRegistered"
      | "governance"
      | "pendingGovernance"
      | "tags"
      | "banksy"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestRelease",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "latestVault",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newRelease",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newVault(address,address,address,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newVault(address,address,address,string,string,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newExperimentalVault(address,address,address,address,string,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newExperimentalVault(address,address,address,address,string,string,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endorseVault(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "endorseVault(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBanksy(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBanksy(address,bool)",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "tagVault",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numReleases",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releases",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "numVaults",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vaults",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "numTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isRegistered",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tags",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "banksy",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestRelease",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "newRelease", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newVault(address,address,address,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newVault(address,address,address,string,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newExperimentalVault(address,address,address,address,string,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newExperimentalVault(address,address,address,address,string,string,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endorseVault(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endorseVault(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBanksy(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBanksy(address,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tagVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numReleases",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "releases", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numVaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vaults", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tags", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "banksy", data: BytesLike): Result;

  events: {
    "NewRelease(uint256,address,string)": EventFragment;
    "NewVault(address,uint256,address,string)": EventFragment;
    "NewExperimentalVault(address,address,address,string)": EventFragment;
    "NewGovernance(address)": EventFragment;
    "VaultTagged(address,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewRelease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewExperimentalVault"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGovernance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VaultTagged"): EventFragment;
}

export interface NewReleaseEventObject {
  release_id: BigNumber;
  template: string;
  api_version: string;
}
export type NewReleaseEvent = TypedEvent<
  [BigNumber, string, string],
  NewReleaseEventObject
>;

export type NewReleaseEventFilter = TypedEventFilter<NewReleaseEvent>;

export interface NewVaultEventObject {
  token: string;
  vault_id: BigNumber;
  vault: string;
  api_version: string;
}
export type NewVaultEvent = TypedEvent<
  [string, BigNumber, string, string],
  NewVaultEventObject
>;

export type NewVaultEventFilter = TypedEventFilter<NewVaultEvent>;

export interface NewExperimentalVaultEventObject {
  token: string;
  deployer: string;
  vault: string;
  api_version: string;
}
export type NewExperimentalVaultEvent = TypedEvent<
  [string, string, string, string],
  NewExperimentalVaultEventObject
>;

export type NewExperimentalVaultEventFilter =
  TypedEventFilter<NewExperimentalVaultEvent>;

export interface NewGovernanceEventObject {
  governance: string;
}
export type NewGovernanceEvent = TypedEvent<[string], NewGovernanceEventObject>;

export type NewGovernanceEventFilter = TypedEventFilter<NewGovernanceEvent>;

export interface VaultTaggedEventObject {
  vault: string;
  tag: string;
}
export type VaultTaggedEvent = TypedEvent<
  [string, string],
  VaultTaggedEventObject
>;

export type VaultTaggedEventFilter = TypedEventFilter<VaultTaggedEvent>;

export interface Registry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    setGovernance(
      governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    latestRelease(overrides?: CallOverrides): Promise<[string]>;

    latestVault(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    newRelease(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newVault(address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newVault(address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newExperimentalVault(address,address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "newExperimentalVault(address,address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "endorseVault(address)"(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "endorseVault(address,uint256)"(
      vault: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBanksy(address)"(
      tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setBanksy(address,bool)"(
      tagger: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tagVault(
      vault: PromiseOrValue<string>,
      tag: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    numReleases(overrides?: CallOverrides): Promise<[BigNumber]>;

    releases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    numVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    numTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    isRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    pendingGovernance(overrides?: CallOverrides): Promise<[string]>;

    tags(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    banksy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  setGovernance(
    governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptGovernance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  latestRelease(overrides?: CallOverrides): Promise<string>;

  latestVault(
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  newRelease(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newVault(address,address,address,string,string)"(
    token: PromiseOrValue<string>,
    guardian: PromiseOrValue<string>,
    rewards: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newVault(address,address,address,string,string,uint256)"(
    token: PromiseOrValue<string>,
    guardian: PromiseOrValue<string>,
    rewards: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    releaseDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newExperimentalVault(address,address,address,address,string,string)"(
    token: PromiseOrValue<string>,
    governance: PromiseOrValue<string>,
    guardian: PromiseOrValue<string>,
    rewards: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "newExperimentalVault(address,address,address,address,string,string,uint256)"(
    token: PromiseOrValue<string>,
    governance: PromiseOrValue<string>,
    guardian: PromiseOrValue<string>,
    rewards: PromiseOrValue<string>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    releaseDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "endorseVault(address)"(
    vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "endorseVault(address,uint256)"(
    vault: PromiseOrValue<string>,
    releaseDelta: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBanksy(address)"(
    tagger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setBanksy(address,bool)"(
    tagger: PromiseOrValue<string>,
    allowed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tagVault(
    vault: PromiseOrValue<string>,
    tag: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  numReleases(overrides?: CallOverrides): Promise<BigNumber>;

  releases(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  numVaults(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vaults(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  tokens(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  numTokens(overrides?: CallOverrides): Promise<BigNumber>;

  isRegistered(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  governance(overrides?: CallOverrides): Promise<string>;

  pendingGovernance(overrides?: CallOverrides): Promise<string>;

  tags(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  banksy(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    setGovernance(
      governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    acceptGovernance(overrides?: CallOverrides): Promise<void>;

    latestRelease(overrides?: CallOverrides): Promise<string>;

    latestVault(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    newRelease(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "newVault(address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "newVault(address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "newExperimentalVault(address,address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "newExperimentalVault(address,address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    "endorseVault(address)"(
      vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "endorseVault(address,uint256)"(
      vault: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBanksy(address)"(
      tagger: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBanksy(address,bool)"(
      tagger: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    tagVault(
      vault: PromiseOrValue<string>,
      tag: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    numReleases(overrides?: CallOverrides): Promise<BigNumber>;

    releases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    numVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    governance(overrides?: CallOverrides): Promise<string>;

    pendingGovernance(overrides?: CallOverrides): Promise<string>;

    tags(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    banksy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NewRelease(uint256,address,string)"(
      release_id?: PromiseOrValue<BigNumberish> | null,
      template?: null,
      api_version?: null
    ): NewReleaseEventFilter;
    NewRelease(
      release_id?: PromiseOrValue<BigNumberish> | null,
      template?: null,
      api_version?: null
    ): NewReleaseEventFilter;

    "NewVault(address,uint256,address,string)"(
      token?: PromiseOrValue<string> | null,
      vault_id?: PromiseOrValue<BigNumberish> | null,
      vault?: null,
      api_version?: null
    ): NewVaultEventFilter;
    NewVault(
      token?: PromiseOrValue<string> | null,
      vault_id?: PromiseOrValue<BigNumberish> | null,
      vault?: null,
      api_version?: null
    ): NewVaultEventFilter;

    "NewExperimentalVault(address,address,address,string)"(
      token?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      vault?: null,
      api_version?: null
    ): NewExperimentalVaultEventFilter;
    NewExperimentalVault(
      token?: PromiseOrValue<string> | null,
      deployer?: PromiseOrValue<string> | null,
      vault?: null,
      api_version?: null
    ): NewExperimentalVaultEventFilter;

    "NewGovernance(address)"(governance?: null): NewGovernanceEventFilter;
    NewGovernance(governance?: null): NewGovernanceEventFilter;

    "VaultTagged(address,string)"(
      vault?: null,
      tag?: null
    ): VaultTaggedEventFilter;
    VaultTagged(vault?: null, tag?: null): VaultTaggedEventFilter;
  };

  estimateGas: {
    setGovernance(
      governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    latestRelease(overrides?: CallOverrides): Promise<BigNumber>;

    latestVault(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newRelease(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newVault(address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newVault(address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newExperimentalVault(address,address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "newExperimentalVault(address,address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "endorseVault(address)"(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "endorseVault(address,uint256)"(
      vault: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBanksy(address)"(
      tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setBanksy(address,bool)"(
      tagger: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tagVault(
      vault: PromiseOrValue<string>,
      tag: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    numReleases(overrides?: CallOverrides): Promise<BigNumber>;

    releases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numTokens(overrides?: CallOverrides): Promise<BigNumber>;

    isRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    pendingGovernance(overrides?: CallOverrides): Promise<BigNumber>;

    tags(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    banksy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    setGovernance(
      governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptGovernance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    latestRelease(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    latestVault(
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newRelease(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newVault(address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newVault(address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newExperimentalVault(address,address,address,address,string,string)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "newExperimentalVault(address,address,address,address,string,string,uint256)"(
      token: PromiseOrValue<string>,
      governance: PromiseOrValue<string>,
      guardian: PromiseOrValue<string>,
      rewards: PromiseOrValue<string>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "endorseVault(address)"(
      vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "endorseVault(address,uint256)"(
      vault: PromiseOrValue<string>,
      releaseDelta: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBanksy(address)"(
      tagger: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setBanksy(address,bool)"(
      tagger: PromiseOrValue<string>,
      allowed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tagVault(
      vault: PromiseOrValue<string>,
      tag: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    numReleases(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    releases(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numVaults(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vaults(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numTokens(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isRegistered(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingGovernance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tags(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    banksy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

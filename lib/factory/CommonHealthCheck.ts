/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CommonHealthCheckInterface extends utils.Interface {
  functions: {
    "check(uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "checks(address)": FunctionFragment;
    "governance()": FunctionFragment;
    "lossLimitRatio()": FunctionFragment;
    "management()": FunctionFragment;
    "profitLimitRatio()": FunctionFragment;
    "setCheck(address,address)": FunctionFragment;
    "setGovernance(address)": FunctionFragment;
    "setManagement(address)": FunctionFragment;
    "setProfitLimitRatio(uint256)": FunctionFragment;
    "setStrategyLimits(address,uint256,uint256)": FunctionFragment;
    "setlossLimitRatio(uint256)": FunctionFragment;
    "strategiesLimits(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "check"
      | "checks"
      | "governance"
      | "lossLimitRatio"
      | "management"
      | "profitLimitRatio"
      | "setCheck"
      | "setGovernance"
      | "setManagement"
      | "setProfitLimitRatio"
      | "setStrategyLimits"
      | "setlossLimitRatio"
      | "strategiesLimits"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "check",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checks",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lossLimitRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "management",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "profitLimitRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCheck",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagement",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitLimitRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyLimits",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setlossLimitRatio",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategiesLimits",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "checks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lossLimitRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "management", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profitLimitRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setCheck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitLimitRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyLimits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setlossLimitRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "strategiesLimits",
    data: BytesLike
  ): Result;

  events: {};
}

export interface CommonHealthCheck extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CommonHealthCheckInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    check(
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      debtPayment: PromiseOrValue<BigNumberish>,
      debtOutstanding: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    governance(overrides?: CallOverrides): Promise<[string]>;

    lossLimitRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    management(overrides?: CallOverrides): Promise<[string]>;

    profitLimitRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    setCheck(
      _strategy: PromiseOrValue<string>,
      _check: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfitLimitRatio(
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategyLimits(
      _strategy: PromiseOrValue<string>,
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setlossLimitRatio(
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategiesLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        profitLimitRatio: BigNumber;
        lossLimitRatio: BigNumber;
        exists: boolean;
      }
    >;
  };

  check(
    profit: PromiseOrValue<BigNumberish>,
    loss: PromiseOrValue<BigNumberish>,
    debtPayment: PromiseOrValue<BigNumberish>,
    debtOutstanding: PromiseOrValue<BigNumberish>,
    totalDebt: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checks(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  governance(overrides?: CallOverrides): Promise<string>;

  lossLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

  management(overrides?: CallOverrides): Promise<string>;

  profitLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

  setCheck(
    _strategy: PromiseOrValue<string>,
    _check: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernance(
    _governance: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setManagement(
    _management: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfitLimitRatio(
    _profitLimitRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategyLimits(
    _strategy: PromiseOrValue<string>,
    _profitLimitRatio: PromiseOrValue<BigNumberish>,
    _lossLimitRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setlossLimitRatio(
    _lossLimitRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategiesLimits(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, boolean] & {
      profitLimitRatio: BigNumber;
      lossLimitRatio: BigNumber;
      exists: boolean;
    }
  >;

  callStatic: {
    check(
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      debtPayment: PromiseOrValue<BigNumberish>,
      debtOutstanding: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    governance(overrides?: CallOverrides): Promise<string>;

    lossLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    management(overrides?: CallOverrides): Promise<string>;

    profitLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    setCheck(
      _strategy: PromiseOrValue<string>,
      _check: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitLimitRatio(
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategyLimits(
      _strategy: PromiseOrValue<string>,
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setlossLimitRatio(
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategiesLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, boolean] & {
        profitLimitRatio: BigNumber;
        lossLimitRatio: BigNumber;
        exists: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    check(
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      debtPayment: PromiseOrValue<BigNumberish>,
      debtOutstanding: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    governance(overrides?: CallOverrides): Promise<BigNumber>;

    lossLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    management(overrides?: CallOverrides): Promise<BigNumber>;

    profitLimitRatio(overrides?: CallOverrides): Promise<BigNumber>;

    setCheck(
      _strategy: PromiseOrValue<string>,
      _check: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfitLimitRatio(
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategyLimits(
      _strategy: PromiseOrValue<string>,
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setlossLimitRatio(
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategiesLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    check(
      profit: PromiseOrValue<BigNumberish>,
      loss: PromiseOrValue<BigNumberish>,
      debtPayment: PromiseOrValue<BigNumberish>,
      debtOutstanding: PromiseOrValue<BigNumberish>,
      totalDebt: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checks(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lossLimitRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    management(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitLimitRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCheck(
      _strategy: PromiseOrValue<string>,
      _check: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernance(
      _governance: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setManagement(
      _management: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfitLimitRatio(
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategyLimits(
      _strategy: PromiseOrValue<string>,
      _profitLimitRatio: PromiseOrValue<BigNumberish>,
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setlossLimitRatio(
      _lossLimitRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategiesLimits(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

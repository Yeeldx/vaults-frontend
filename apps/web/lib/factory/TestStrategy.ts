/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface TestStrategyInterface extends utils.Interface {
  functions: {
    "_setWant(address)": FunctionFragment;
    "_takeFunds(uint256)": FunctionFragment;
    "_toggleDelegation()": FunctionFragment;
    "_toggleReentrancyExploit()": FunctionFragment;
    "apiVersion()": FunctionFragment;
    "clone(address)": FunctionFragment;
    "clone(address,address,address,address)": FunctionFragment;
    "debtThreshold()": FunctionFragment;
    "delegateEverything()": FunctionFragment;
    "delegatedAssets()": FunctionFragment;
    "doHealthCheck()": FunctionFragment;
    "doReentrancy()": FunctionFragment;
    "emergencyExit()": FunctionFragment;
    "estimatedTotalAssets()": FunctionFragment;
    "ethToWant(uint256)": FunctionFragment;
    "harvest()": FunctionFragment;
    "harvestTrigger(uint256)": FunctionFragment;
    "healthCheck()": FunctionFragment;
    "initialize(address,address,address,address)": FunctionFragment;
    "isActive()": FunctionFragment;
    "isOriginal()": FunctionFragment;
    "keeper()": FunctionFragment;
    "maxReportDelay()": FunctionFragment;
    "metadataURI()": FunctionFragment;
    "migrate(address)": FunctionFragment;
    "minReportDelay()": FunctionFragment;
    "name()": FunctionFragment;
    "profitFactor()": FunctionFragment;
    "protectedToken()": FunctionFragment;
    "rewards()": FunctionFragment;
    "setDebtThreshold(uint256)": FunctionFragment;
    "setDoHealthCheck(bool)": FunctionFragment;
    "setEmergencyExit()": FunctionFragment;
    "setHealthCheck(address)": FunctionFragment;
    "setKeeper(address)": FunctionFragment;
    "setMaxReportDelay(uint256)": FunctionFragment;
    "setMetadataURI(string)": FunctionFragment;
    "setMinReportDelay(uint256)": FunctionFragment;
    "setProfitFactor(uint256)": FunctionFragment;
    "setRewards(address)": FunctionFragment;
    "setStrategist(address)": FunctionFragment;
    "strategist()": FunctionFragment;
    "sweep(address)": FunctionFragment;
    "tend()": FunctionFragment;
    "tendTrigger(uint256)": FunctionFragment;
    "vault()": FunctionFragment;
    "want()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_setWant"
      | "_takeFunds"
      | "_toggleDelegation"
      | "_toggleReentrancyExploit"
      | "apiVersion"
      | "clone(address)"
      | "clone(address,address,address,address)"
      | "debtThreshold"
      | "delegateEverything"
      | "delegatedAssets"
      | "doHealthCheck"
      | "doReentrancy"
      | "emergencyExit"
      | "estimatedTotalAssets"
      | "ethToWant"
      | "harvest"
      | "harvestTrigger"
      | "healthCheck"
      | "initialize"
      | "isActive"
      | "isOriginal"
      | "keeper"
      | "maxReportDelay"
      | "metadataURI"
      | "migrate"
      | "minReportDelay"
      | "name"
      | "profitFactor"
      | "protectedToken"
      | "rewards"
      | "setDebtThreshold"
      | "setDoHealthCheck"
      | "setEmergencyExit"
      | "setHealthCheck"
      | "setKeeper"
      | "setMaxReportDelay"
      | "setMetadataURI"
      | "setMinReportDelay"
      | "setProfitFactor"
      | "setRewards"
      | "setStrategist"
      | "strategist"
      | "sweep"
      | "tend"
      | "tendTrigger"
      | "vault"
      | "want"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_setWant",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "_takeFunds",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "_toggleDelegation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_toggleReentrancyExploit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "apiVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "clone(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "clone(address,address,address,address)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "debtThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegateEverything",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "delegatedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doHealthCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "doReentrancy",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "estimatedTotalAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ethToWant",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "harvestTrigger",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "healthCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "isActive", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isOriginal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "keeper", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "maxReportDelay",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "minReportDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profitFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protectedToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setDebtThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDoHealthCheck",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyExit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setHealthCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setKeeper",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxReportDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMetadataURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinReportDelay",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfitFactor",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewards",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "strategist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sweep",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "tend", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tendTrigger",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "_setWant", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_takeFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_toggleDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_toggleReentrancyExploit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "apiVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "clone(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clone(address,address,address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "debtThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateEverything",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegatedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doHealthCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "doReentrancy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "estimatedTotalAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ethToWant", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "harvestTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "healthCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOriginal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protectedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDebtThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDoHealthCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setHealthCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setKeeper", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinReportDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfitFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setStrategist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "strategist", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sweep", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tendTrigger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Cloned(address)": EventFragment;
    "EmergencyExitEnabled()": EventFragment;
    "Harvested(uint256,uint256,uint256,uint256)": EventFragment;
    "SetDoHealthCheck(bool)": EventFragment;
    "SetHealthCheck(address)": EventFragment;
    "UpdatedDebtThreshold(uint256)": EventFragment;
    "UpdatedKeeper(address)": EventFragment;
    "UpdatedMaxReportDelay(uint256)": EventFragment;
    "UpdatedMetadataURI(string)": EventFragment;
    "UpdatedMinReportDelay(uint256)": EventFragment;
    "UpdatedProfitFactor(uint256)": EventFragment;
    "UpdatedRewards(address)": EventFragment;
    "UpdatedStrategist(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Cloned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyExitEnabled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDoHealthCheck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHealthCheck"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedDebtThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedKeeper"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMaxReportDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMetadataURI"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedMinReportDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedProfitFactor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedRewards"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdatedStrategist"): EventFragment;
}

export interface ClonedEventObject {
  clone: string;
}
export type ClonedEvent = TypedEvent<[string], ClonedEventObject>;

export type ClonedEventFilter = TypedEventFilter<ClonedEvent>;

export interface EmergencyExitEnabledEventObject {}
export type EmergencyExitEnabledEvent = TypedEvent<
  [],
  EmergencyExitEnabledEventObject
>;

export type EmergencyExitEnabledEventFilter =
  TypedEventFilter<EmergencyExitEnabledEvent>;

export interface HarvestedEventObject {
  profit: BigNumber;
  loss: BigNumber;
  debtPayment: BigNumber;
  debtOutstanding: BigNumber;
}
export type HarvestedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  HarvestedEventObject
>;

export type HarvestedEventFilter = TypedEventFilter<HarvestedEvent>;

export interface SetDoHealthCheckEventObject {
  arg0: boolean;
}
export type SetDoHealthCheckEvent = TypedEvent<
  [boolean],
  SetDoHealthCheckEventObject
>;

export type SetDoHealthCheckEventFilter =
  TypedEventFilter<SetDoHealthCheckEvent>;

export interface SetHealthCheckEventObject {
  arg0: string;
}
export type SetHealthCheckEvent = TypedEvent<
  [string],
  SetHealthCheckEventObject
>;

export type SetHealthCheckEventFilter = TypedEventFilter<SetHealthCheckEvent>;

export interface UpdatedDebtThresholdEventObject {
  debtThreshold: BigNumber;
}
export type UpdatedDebtThresholdEvent = TypedEvent<
  [BigNumber],
  UpdatedDebtThresholdEventObject
>;

export type UpdatedDebtThresholdEventFilter =
  TypedEventFilter<UpdatedDebtThresholdEvent>;

export interface UpdatedKeeperEventObject {
  newKeeper: string;
}
export type UpdatedKeeperEvent = TypedEvent<[string], UpdatedKeeperEventObject>;

export type UpdatedKeeperEventFilter = TypedEventFilter<UpdatedKeeperEvent>;

export interface UpdatedMaxReportDelayEventObject {
  delay: BigNumber;
}
export type UpdatedMaxReportDelayEvent = TypedEvent<
  [BigNumber],
  UpdatedMaxReportDelayEventObject
>;

export type UpdatedMaxReportDelayEventFilter =
  TypedEventFilter<UpdatedMaxReportDelayEvent>;

export interface UpdatedMetadataURIEventObject {
  metadataURI: string;
}
export type UpdatedMetadataURIEvent = TypedEvent<
  [string],
  UpdatedMetadataURIEventObject
>;

export type UpdatedMetadataURIEventFilter =
  TypedEventFilter<UpdatedMetadataURIEvent>;

export interface UpdatedMinReportDelayEventObject {
  delay: BigNumber;
}
export type UpdatedMinReportDelayEvent = TypedEvent<
  [BigNumber],
  UpdatedMinReportDelayEventObject
>;

export type UpdatedMinReportDelayEventFilter =
  TypedEventFilter<UpdatedMinReportDelayEvent>;

export interface UpdatedProfitFactorEventObject {
  profitFactor: BigNumber;
}
export type UpdatedProfitFactorEvent = TypedEvent<
  [BigNumber],
  UpdatedProfitFactorEventObject
>;

export type UpdatedProfitFactorEventFilter =
  TypedEventFilter<UpdatedProfitFactorEvent>;

export interface UpdatedRewardsEventObject {
  rewards: string;
}
export type UpdatedRewardsEvent = TypedEvent<
  [string],
  UpdatedRewardsEventObject
>;

export type UpdatedRewardsEventFilter = TypedEventFilter<UpdatedRewardsEvent>;

export interface UpdatedStrategistEventObject {
  newStrategist: string;
}
export type UpdatedStrategistEvent = TypedEvent<
  [string],
  UpdatedStrategistEventObject
>;

export type UpdatedStrategistEventFilter =
  TypedEventFilter<UpdatedStrategistEvent>;

export interface TestStrategy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: TestStrategyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _setWant(
      _want: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _takeFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _toggleDelegation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    _toggleReentrancyExploit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    apiVersion(overrides?: CallOverrides): Promise<[string]>;

    "clone(address)"(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "clone(address,address,address,address)"(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    debtThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    delegateEverything(overrides?: CallOverrides): Promise<[boolean]>;

    delegatedAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    doHealthCheck(overrides?: CallOverrides): Promise<[boolean]>;

    doReentrancy(overrides?: CallOverrides): Promise<[boolean]>;

    emergencyExit(overrides?: CallOverrides): Promise<[boolean]>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    ethToWant(
      amtInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    harvestTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    healthCheck(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isActive(overrides?: CallOverrides): Promise<[boolean]>;

    isOriginal(overrides?: CallOverrides): Promise<[boolean]>;

    keeper(overrides?: CallOverrides): Promise<[string]>;

    maxReportDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    metadataURI(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      _newStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    minReportDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    profitFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    protectedToken(overrides?: CallOverrides): Promise<[string]>;

    rewards(overrides?: CallOverrides): Promise<[string]>;

    setDebtThreshold(
      _debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDoHealthCheck(
      _doHealthCheck: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergencyExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setHealthCheck(
      _healthCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMaxReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewards(
      _rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    strategist(overrides?: CallOverrides): Promise<[string]>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tendTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _setWant(
    _want: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _takeFunds(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _toggleDelegation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  _toggleReentrancyExploit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  apiVersion(overrides?: CallOverrides): Promise<string>;

  "clone(address)"(
    _vault: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "clone(address,address,address,address)"(
    _vault: PromiseOrValue<string>,
    _strategist: PromiseOrValue<string>,
    _rewards: PromiseOrValue<string>,
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  delegateEverything(overrides?: CallOverrides): Promise<boolean>;

  delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  doHealthCheck(overrides?: CallOverrides): Promise<boolean>;

  doReentrancy(overrides?: CallOverrides): Promise<boolean>;

  emergencyExit(overrides?: CallOverrides): Promise<boolean>;

  estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

  ethToWant(
    amtInWei: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  harvestTrigger(
    callCostInWei: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  healthCheck(overrides?: CallOverrides): Promise<string>;

  initialize(
    _vault: PromiseOrValue<string>,
    _strategist: PromiseOrValue<string>,
    _rewards: PromiseOrValue<string>,
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isActive(overrides?: CallOverrides): Promise<boolean>;

  isOriginal(overrides?: CallOverrides): Promise<boolean>;

  keeper(overrides?: CallOverrides): Promise<string>;

  maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

  metadataURI(overrides?: CallOverrides): Promise<string>;

  migrate(
    _newStrategy: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

  protectedToken(overrides?: CallOverrides): Promise<string>;

  rewards(overrides?: CallOverrides): Promise<string>;

  setDebtThreshold(
    _debtThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDoHealthCheck(
    _doHealthCheck: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergencyExit(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setHealthCheck(
    _healthCheck: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setKeeper(
    _keeper: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMaxReportDelay(
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMetadataURI(
    _metadataURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinReportDelay(
    _delay: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfitFactor(
    _profitFactor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewards(
    _rewards: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStrategist(
    _strategist: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  strategist(overrides?: CallOverrides): Promise<string>;

  sweep(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tend(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tendTrigger(
    callCostInWei: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vault(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amountNeeded: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _setWant(
      _want: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    _takeFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    _toggleDelegation(overrides?: CallOverrides): Promise<void>;

    _toggleReentrancyExploit(overrides?: CallOverrides): Promise<void>;

    apiVersion(overrides?: CallOverrides): Promise<string>;

    "clone(address)"(
      _vault: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "clone(address,address,address,address)"(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    delegateEverything(overrides?: CallOverrides): Promise<boolean>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    doHealthCheck(overrides?: CallOverrides): Promise<boolean>;

    doReentrancy(overrides?: CallOverrides): Promise<boolean>;

    emergencyExit(overrides?: CallOverrides): Promise<boolean>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    ethToWant(
      amtInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(overrides?: CallOverrides): Promise<void>;

    harvestTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    healthCheck(overrides?: CallOverrides): Promise<string>;

    initialize(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isActive(overrides?: CallOverrides): Promise<boolean>;

    isOriginal(overrides?: CallOverrides): Promise<boolean>;

    keeper(overrides?: CallOverrides): Promise<string>;

    maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    metadataURI(overrides?: CallOverrides): Promise<string>;

    migrate(
      _newStrategy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    protectedToken(overrides?: CallOverrides): Promise<string>;

    rewards(overrides?: CallOverrides): Promise<string>;

    setDebtThreshold(
      _debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDoHealthCheck(
      _doHealthCheck: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyExit(overrides?: CallOverrides): Promise<void>;

    setHealthCheck(
      _healthCheck: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewards(
      _rewards: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    strategist(overrides?: CallOverrides): Promise<string>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    tend(overrides?: CallOverrides): Promise<void>;

    tendTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vault(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Cloned(address)"(clone?: PromiseOrValue<string> | null): ClonedEventFilter;
    Cloned(clone?: PromiseOrValue<string> | null): ClonedEventFilter;

    "EmergencyExitEnabled()"(): EmergencyExitEnabledEventFilter;
    EmergencyExitEnabled(): EmergencyExitEnabledEventFilter;

    "Harvested(uint256,uint256,uint256,uint256)"(
      profit?: null,
      loss?: null,
      debtPayment?: null,
      debtOutstanding?: null
    ): HarvestedEventFilter;
    Harvested(
      profit?: null,
      loss?: null,
      debtPayment?: null,
      debtOutstanding?: null
    ): HarvestedEventFilter;

    "SetDoHealthCheck(bool)"(arg0?: null): SetDoHealthCheckEventFilter;
    SetDoHealthCheck(arg0?: null): SetDoHealthCheckEventFilter;

    "SetHealthCheck(address)"(arg0?: null): SetHealthCheckEventFilter;
    SetHealthCheck(arg0?: null): SetHealthCheckEventFilter;

    "UpdatedDebtThreshold(uint256)"(
      debtThreshold?: null
    ): UpdatedDebtThresholdEventFilter;
    UpdatedDebtThreshold(debtThreshold?: null): UpdatedDebtThresholdEventFilter;

    "UpdatedKeeper(address)"(newKeeper?: null): UpdatedKeeperEventFilter;
    UpdatedKeeper(newKeeper?: null): UpdatedKeeperEventFilter;

    "UpdatedMaxReportDelay(uint256)"(
      delay?: null
    ): UpdatedMaxReportDelayEventFilter;
    UpdatedMaxReportDelay(delay?: null): UpdatedMaxReportDelayEventFilter;

    "UpdatedMetadataURI(string)"(
      metadataURI?: null
    ): UpdatedMetadataURIEventFilter;
    UpdatedMetadataURI(metadataURI?: null): UpdatedMetadataURIEventFilter;

    "UpdatedMinReportDelay(uint256)"(
      delay?: null
    ): UpdatedMinReportDelayEventFilter;
    UpdatedMinReportDelay(delay?: null): UpdatedMinReportDelayEventFilter;

    "UpdatedProfitFactor(uint256)"(
      profitFactor?: null
    ): UpdatedProfitFactorEventFilter;
    UpdatedProfitFactor(profitFactor?: null): UpdatedProfitFactorEventFilter;

    "UpdatedRewards(address)"(rewards?: null): UpdatedRewardsEventFilter;
    UpdatedRewards(rewards?: null): UpdatedRewardsEventFilter;

    "UpdatedStrategist(address)"(
      newStrategist?: null
    ): UpdatedStrategistEventFilter;
    UpdatedStrategist(newStrategist?: null): UpdatedStrategistEventFilter;
  };

  estimateGas: {
    _setWant(
      _want: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _takeFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _toggleDelegation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    _toggleReentrancyExploit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    apiVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "clone(address)"(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "clone(address,address,address,address)"(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    debtThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    delegateEverything(overrides?: CallOverrides): Promise<BigNumber>;

    delegatedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    doHealthCheck(overrides?: CallOverrides): Promise<BigNumber>;

    doReentrancy(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyExit(overrides?: CallOverrides): Promise<BigNumber>;

    estimatedTotalAssets(overrides?: CallOverrides): Promise<BigNumber>;

    ethToWant(
      amtInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    harvestTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    healthCheck(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isActive(overrides?: CallOverrides): Promise<BigNumber>;

    isOriginal(overrides?: CallOverrides): Promise<BigNumber>;

    keeper(overrides?: CallOverrides): Promise<BigNumber>;

    maxReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    metadataURI(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      _newStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    minReportDelay(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    profitFactor(overrides?: CallOverrides): Promise<BigNumber>;

    protectedToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(overrides?: CallOverrides): Promise<BigNumber>;

    setDebtThreshold(
      _debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDoHealthCheck(
      _doHealthCheck: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergencyExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setHealthCheck(
      _healthCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMaxReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewards(
      _rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    strategist(overrides?: CallOverrides): Promise<BigNumber>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tendTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _setWant(
      _want: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _takeFunds(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _toggleDelegation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    _toggleReentrancyExploit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    apiVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "clone(address)"(
      _vault: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "clone(address,address,address,address)"(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    debtThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegateEverything(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delegatedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doHealthCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    doReentrancy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyExit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    estimatedTotalAssets(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ethToWant(
      amtInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    harvestTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    healthCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _vault: PromiseOrValue<string>,
      _strategist: PromiseOrValue<string>,
      _rewards: PromiseOrValue<string>,
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isActive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOriginal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    keeper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxReportDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    metadataURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      _newStrategy: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    minReportDelay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    profitFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protectedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDebtThreshold(
      _debtThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDoHealthCheck(
      _doHealthCheck: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyExit(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setHealthCheck(
      _healthCheck: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setKeeper(
      _keeper: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMaxReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMetadataURI(
      _metadataURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinReportDelay(
      _delay: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfitFactor(
      _profitFactor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewards(
      _rewards: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStrategist(
      _strategist: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    strategist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sweep(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tend(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tendTrigger(
      callCostInWei: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amountNeeded: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
